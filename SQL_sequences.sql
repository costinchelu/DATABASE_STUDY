--------SEQUENCE---------
--object that generates unique numbers(ID)

--example creating a sequence for unique numbers of athletes 
--running a sporting event:
CREATE SEQUENCE runner_id_seq 
INCREMENT BY 1 
START WITH 1 
MAXVALUE 50000 
NOCACHE			 
NOCYCLE;		 
--NOCACHE prevents values being cached in memory
--NOCYCLE = when we get to maxvalue, there will be no new 
--numbers generated
--preventing restarting numbering from 1
--in the case that old numbers are efficiently deleted, 
--we can CYCLE them to reuse some of old IDs

--to verify created sequences, we will query USER_OBJECTS 
--data dictionary:
SELECT
    sequence_name,
    min_value,
    max_value,
    increment_by,
    last_number
FROM
    user_sequences;
	
--inserting sequences in tables. We are using the sequence 
--previously created named departments_seq to insert 
--next value as unique departments_id:
INSERT INTO departments (
    department_id,
    department_name,
    location_id
) VALUES (
    departments_seq.NEXTVAL,
    'Suport',
    2500
);

--supposingly we hire employes to staff the new department.
--We will use NEXTVAL in employees sequence and CURRVAL from 
--departments sequence:
INSERT INTO employees (
    employee_id,
    first_name,
    last_name,
    department_id,
    email
) VALUES (
    employees_seq.NEXTVAL,
    'John',
    'Gate',
    dept_deptid_seq.CURRVAL,
    'jgate@dot.com'
);
/*

CURRVAL = refer to a seq. number that the current user
		  has just generated
NEXTVAL = used to generate a seq number in the current user's
		  session before CURRVAL can be referenced

Can be used in:
+ SELECT statement that is not part of a subquery
+ SELECT list of a subquery in an INSERT statement
+ VALUES clause of an INSERT statement
+ SET clause of an UPDATE statement

Cannot be used in:
x SELECT list of a view
x SELECT statement with the DISTINCT keyword
x SELECT statement with GROUP BY, HAVING or ORDER BY clauses
x subquery in a SELECT, DELETE or UPDATE statement
x DEFAULT expression in a CREATE TABLE or ALTER TABLE statement

*/


CREATE TABLE runners (
    runner_id    NUMBER(6, 0)
        CONSTRAINT runners_id_pk PRIMARY KEY,
    first_name   VARCHAR2(30),
    last_name    VARCHAR2(30)
);

CREATE SEQUENCE runner_id_seq 
INCREMENT BY 1 
START WITH 1 
MAXVALUE 50000 
NOCACHE 
NOCYCLE;

--runner's ID will be generated by retrieving the NEXTVAL
--from sequence

INSERT INTO runners (
    runner_id,
    first_name,
    last_name
) VALUES (
    runner_id_seq.NEXTVAL,
    'Joanne',
    'Everely'
);

INSERT INTO runners (
    runner_id,
    first_name,
    last_name
) VALUES (
    runner_id_seq.NEXTVAL,
    'Adam',
    'Curtis'
);

--we can view the current value in the sequence

SELECT
    runner_id_seq.CURRVAL
FROM
    dual;
    
--changing maximum value in case number of runners 
--exceeds 50000
ALTER SEQUENCE runner_id_seq
INCREMENT BY 1
MAXVALUE 999999
NOCACHE
NOCYCLE;
--we must have ALTER privilege for the sequence 
--in order to modify it. START WITH cannot be changed

--to remove a sequence:
DROP SEQUENCE runner_id_seq;